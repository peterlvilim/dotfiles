// Generated by CoffeeScript 1.3.3
(function() {
  var Settings, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Settings = Settings = {
    get: function(key) {
      if (key in localStorage) {
        return JSON.parse(localStorage[key]);
      } else {
        return this.defaults[key];
      }
    },
    set: function(key, value) {
      var jsonValue;
      if (value === this.defaults[key]) {
        return this.clear(key);
      } else {
        jsonValue = JSON.stringify(value);
        localStorage[key] = jsonValue;
        return Sync.set(key, jsonValue);
      }
    },
    clear: function(key) {
      if (this.has(key)) {
        delete localStorage[key];
      }
      return Sync.clear(key);
    },
    has: function(key) {
      return key in localStorage;
    },
    postUpdateHooks: {
      keyMappings: function(value) {
        root.Commands.clearKeyMappingsAndSetDefaults();
        root.Commands.parseCustomKeyMappings(value);
        return root.refreshCompletionKeysAfterMappingSave();
      },
      searchEngines: function(value) {
        return root.Settings.parseSearchEngines(value);
      }
    },
    performPostUpdateHook: function(key, value) {
      if (this.postUpdateHooks[key]) {
        return this.postUpdateHooks[key](value);
      }
    },
    searchEnginesMap: {},
    parseSearchEngines: function(searchEnginesText) {
      var a, pair, split_pairs, _i, _len;
      this.searchEnginesMap = {};
      split_pairs = (function() {
        var _i, _len, _ref, _results;
        _ref = searchEnginesText.split(/\n/);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pair = _ref[_i];
          if (pair[0] !== "#") {
            _results.push(pair.split(/: (.+)/, 2));
          }
        }
        return _results;
      })();
      for (_i = 0, _len = split_pairs.length; _i < _len; _i++) {
        a = split_pairs[_i];
        this.searchEnginesMap[a[0]] = a[1];
      }
      return this.searchEnginesMap;
    },
    getSearchEngines: function() {
      if (Object.keys(this.searchEnginesMap).length === 0) {
        this.parseSearchEngines(this.get("searchEngines") || "");
      }
      return this.searchEnginesMap;
    },
    defaults: {
      scrollStepSize: 60,
      linkHintCharacters: "sadfjklewcmpgh",
      linkHintNumbers: "0123456789",
      filterLinkHints: false,
      hideHud: false,
      userDefinedLinkHintCss: "div > .vimiumHintMarker {\n/* linkhint boxes */\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#FFF785),\n  color-stop(100%,#FFC542));\nborder: 1px solid #E3BE23;\n}\n\ndiv > .vimiumHintMarker span {\n/* linkhint text */\ncolor: black;\nfont-weight: bold;\nfont-size: 12px;\n}\n\ndiv > .vimiumHintMarker > .matchingCharacter {\n}",
      excludedUrls: "http*://mail.google.com/*",
      previousPatterns: "prev,previous,back,<,\u2190,\xab,\u226a,<<",
      nextPatterns: "next,more,>,\u2192,\xbb,\u226b,>>",
      searchUrl: "http://www.google.com/search?q=",
      searchEngines: "w: http://www.wikipedia.org/w/index.php?title=Special:Search&search=%s",
      settingsVersion: Utils.getCurrentVersion()
    }
  };

  if (Utils.compareVersions("1.42", Settings.get("settingsVersion")) !== -1) {
    Settings.set("scrollStepSize", parseFloat(Settings.get("scrollStepSize")));
  }

  Settings.set("settingsVersion", Utils.getCurrentVersion());

}).call(this);
