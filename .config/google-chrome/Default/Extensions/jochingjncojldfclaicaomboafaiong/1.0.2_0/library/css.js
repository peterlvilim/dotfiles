// Generated by CoffeeScript 1.3.3

/*
  css.js - Dynamic stylesheets

  https://github.com/radmen/css.js
  Copyright (c) 2012 Radoslaw Mejer <radmen@gmail.com>
*/


(function() {
  var Selector, Sheet, extend, is_object,
    __hasProp = {}.hasOwnProperty;

  extend = function(extendedVar, object) {
    var key, value;
    for (key in object) {
      if (!__hasProp.call(object, key)) continue;
      value = object[key];
      extendedVar[key] = value;
    }
  };

  is_object = function(object) {
    return '[object Object]' === Object.prototype.toString.call(object);
  };

  Selector = (function() {

    function Selector(name, sheet) {
      this.name = name;
      this.sheet = sheet;
      this.props = {};
      this.node = document.createTextNode('');
    }

    Selector.prototype.getName = function() {
      return this.name;
    };

    Selector.prototype.properties = function(properties) {
      extend(this.props, properties);
      this.refresh();
      return this;
    };

    Selector.prototype.refresh = function() {
      var name, parts, value, _ref;
      parts = [];
      _ref = this.props;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        parts.push("" + name + ":" + value);
      }
      this.node.nodeValue = "" + this.name + " { " + (parts.join(';')) + "; }";
    };

    Selector.prototype.getNode = function() {
      return this.node;
    };

    Selector.prototype.selector = function(name, properties) {
      return this.sheet.selector(name, properties);
    };

    Selector.prototype.remove = function() {
      return this.sheet.remove(this);
    };

    return Selector;

  })();

  Sheet = (function() {

    function Sheet() {
      this.node = document.createElement('style');
      this.node.type = 'text/css';
      this.selectors = {};
      document.head.appendChild(this.node);
    }

    Sheet.prototype.selector = function(name, properties) {
      var selector;
      if (!this.selectors[name]) {
        selector = this.selectors[name] = new Selector(name, this);
        this.node.appendChild(selector.getNode());
      } else {
        selector = this.selectors[name];
      }
      if (properties) {
        selector.properties(properties);
        return this;
      }
      return selector;
    };

    Sheet.prototype.remove = function(selector) {
      if (!selector) {
        this.node.parentNode.removeChild(this.node);
        delete this.properties;
        return null;
      }
      if (typeof selector === 'string' && this.selectors[selector]) {
        this.node.removeChild(this.selectors[selector].getNode());
        delete this.selectors[selector];
      }
      if (is_object(selector)) {
        this.node.removeChild(selector.getNode());
        delete this.selectors[selector.getName()];
      }
      return this;
    };

    return Sheet;

  })();

  this.cssjs = {
    newSheet: function() {
      return new Sheet();
    }
  };

}).call(this);
